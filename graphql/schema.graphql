# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"mutation root"
type mutation_root {
  "delete data from the table: \"projects\""
  delete_projects(
    "filter the rows which have to be deleted"
    where: projects_bool_exp!
  ): projects_mutation_response
  "delete single row from the table: \"projects\""
  delete_projects_by_pk(id: Int!): projects
  "insert data into the table: \"projects\""
  insert_projects(
    "the rows to be inserted"
    objects: [projects_insert_input!]!,
    "on conflict condition"
    on_conflict: projects_on_conflict
  ): projects_mutation_response
  "insert a single row into the table: \"projects\""
  insert_projects_one(
    "the row to be inserted"
    object: projects_insert_input!,
    "on conflict condition"
    on_conflict: projects_on_conflict
  ): projects
  "update data of the table: \"projects\""
  update_projects(
    "increments the numeric columns with given value of the filtered values"
    _inc: projects_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: projects_set_input,
    "filter the rows which have to be updated"
    where: projects_bool_exp!
  ): projects_mutation_response
  "update single row of the table: \"projects\""
  update_projects_by_pk(
    "increments the numeric columns with given value of the filtered values"
    _inc: projects_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: projects_set_input,
    pk_columns: projects_pk_columns_input!
  ): projects
}

"columns and relationships of \"projects\""
type projects {
  id: Int!
  image: String!
  name: String!
  slug: String!
}

"aggregated selection of \"projects\""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"aggregate fields of \"projects\""
type projects_aggregate_fields {
  avg: projects_avg_fields
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
  stddev: projects_stddev_fields
  stddev_pop: projects_stddev_pop_fields
  stddev_samp: projects_stddev_samp_fields
  sum: projects_sum_fields
  var_pop: projects_var_pop_fields
  var_samp: projects_var_samp_fields
  variance: projects_variance_fields
}

"aggregate avg on columns"
type projects_avg_fields {
  id: Float
}

"aggregate max on columns"
type projects_max_fields {
  id: Int
  image: String
  name: String
  slug: String
}

"aggregate min on columns"
type projects_min_fields {
  id: Int
  image: String
  name: String
  slug: String
}

"response of any mutation on the table \"projects\""
type projects_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [projects!]!
}

"aggregate stddev on columns"
type projects_stddev_fields {
  id: Float
}

"aggregate stddev_pop on columns"
type projects_stddev_pop_fields {
  id: Float
}

"aggregate stddev_samp on columns"
type projects_stddev_samp_fields {
  id: Float
}

"aggregate sum on columns"
type projects_sum_fields {
  id: Int
}

"aggregate var_pop on columns"
type projects_var_pop_fields {
  id: Float
}

"aggregate var_samp on columns"
type projects_var_samp_fields {
  id: Float
}

"aggregate variance on columns"
type projects_variance_fields {
  id: Float
}

type query_root {
  "fetch data from the table: \"projects\""
  projects(
    "distinct select on columns"
    distinct_on: [projects_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [projects_order_by!],
    "filter the rows returned"
    where: projects_bool_exp
  ): [projects!]!
  "fetch aggregated fields from the table: \"projects\""
  projects_aggregate(
    "distinct select on columns"
    distinct_on: [projects_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [projects_order_by!],
    "filter the rows returned"
    where: projects_bool_exp
  ): projects_aggregate!
  "fetch data from the table: \"projects\" using primary key columns"
  projects_by_pk(id: Int!): projects
}

type subscription_root {
  "fetch data from the table: \"projects\""
  projects(
    "distinct select on columns"
    distinct_on: [projects_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [projects_order_by!],
    "filter the rows returned"
    where: projects_bool_exp
  ): [projects!]!
  "fetch aggregated fields from the table: \"projects\""
  projects_aggregate(
    "distinct select on columns"
    distinct_on: [projects_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [projects_order_by!],
    "filter the rows returned"
    where: projects_bool_exp
  ): projects_aggregate!
  "fetch data from the table: \"projects\" using primary key columns"
  projects_by_pk(id: Int!): projects
}

"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}

"unique or primary key constraints on table \"projects\""
enum projects_constraint {
  "unique or primary key constraint"
  projects_pkey
}

"select columns of table \"projects\""
enum projects_select_column {
  "column name"
  id
  "column name"
  image
  "column name"
  name
  "column name"
  slug
}

"update columns of table \"projects\""
enum projects_update_column {
  "column name"
  id
  "column name"
  image
  "column name"
  name
  "column name"
  slug
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}

"Boolean expression to filter rows from the table \"projects\". All fields are combined with a logical 'AND'."
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  id: Int_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
}

"input type for incrementing numeric columns in table \"projects\""
input projects_inc_input {
  id: Int
}

"input type for inserting data into table \"projects\""
input projects_insert_input {
  id: Int
  image: String
  name: String
  slug: String
}

"on conflict condition type for table \"projects\""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"Ordering options when selecting data from \"projects\"."
input projects_order_by {
  id: order_by
  image: order_by
  name: order_by
  slug: order_by
}

"primary key columns input for table: projects"
input projects_pk_columns_input {
  id: Int!
}

"input type for updating data in table \"projects\""
input projects_set_input {
  id: Int
  image: String
  name: String
  slug: String
}
